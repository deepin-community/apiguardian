Description: patch build.gradle.kts to Groovy-based build.gradle for Debian
Forwarded: not-needed
Comment: this file is based on the build.gradle from apiguardian 1.1.0

--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,218 +1,206 @@
-import java.time.OffsetDateTime
-import java.time.format.DateTimeFormatter
+import java.text.SimpleDateFormat
+
+buildscript {
+    dependencies {
+        // Create OSGI bundles
+        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1"
+    }
+}
 
 plugins {
-	id("java")
-	id("eclipse")
-	id("idea")
-	id("maven-publish")
-	id("signing")
-	id("biz.aQute.bnd.builder") version "5.3.0"
-	id("net.nemerosa.versioning") version "2.14.0"
-	id("org.ajoberstar.git-publish") version "3.0.0"
-	id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
-}
-
-val buildTimeAndDate = OffsetDateTime.now()
-val buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
-val buildTime = DateTimeFormatter.ofPattern("HH:mm:ss.SSSZ").format(buildTimeAndDate)
-val builtByValue = project.findProperty("builtBy") ?: project.property("defaultBuiltBy")
-
-val isSnapshot = project.version.toString().contains("SNAPSHOT")
-val docsVersion = if (isSnapshot) "snapshot" else project.version
-val docsDir = File(buildDir, "ghpages-docs")
-val replaceCurrentDocs = project.hasProperty("replaceCurrentDocs")
+	id 'java'
+	id 'eclipse'
+	id 'idea'
+	id 'maven'
+	id 'signing'
+}
+
+apply plugin: 'biz.aQute.bnd.builder'
+
+// https://reproducible-builds.org/docs/source-date-epoch/
+String source_date_epoch = System.getenv("SOURCE_DATE_EPOCH");
+if (source_date_epoch != null) {
+   TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
+}
+Date buildTimeAndDate = source_date_epoch == null ?
+    new Date() :
+    new Date(1000 * Long.parseLong(source_date_epoch))
+ext {
+	buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
+	buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
+	builtByValue = project.hasProperty('builtBy') ? project.builtBy : project.defaultBuiltBy
+}
 
-description = "@API Guardian"
-val moduleName = "org.apiguardian.api"
+description = '@API Guardian'
+def moduleName = 'org.apiguardian.api'
 
 repositories {
 	mavenCentral()
 }
 
-java {
-	withJavadocJar()
-	withSourcesJar()
-}
-
-val moduleSourceDir = file("src/module/java")
-
-tasks {
-	compileJava {
-		options.release.set(6)
-	}
-
-	val compileModule by registering(JavaCompile::class) {
-		source(moduleSourceDir)
-		destinationDir = file("$buildDir/classes/java/modules")
-		classpath = files(compileJava.map { it.classpath })
-		inputs.property("moduleName", moduleName)
-		inputs.property("moduleVersion", project.version)
-		options.release.set(9)
-		options.compilerArgs = listOf(
-			"--module-version", project.version as String,
-			"--module-source-path", moduleSourceDir.toString(),
-			"--patch-module", "$moduleName=${sourceSets.main.get().allJava.srcDirs.joinToString(":")}",
-			"--module", moduleName
-		)
-	}
-
-	jar {
-		fun normalizeVersion(versionLiteral: String): String {
-			val regex = Regex("(\\d+\\.\\d+\\.\\d+).*")
-			val match = regex.matchEntire(versionLiteral)
-			require(match != null) {
-				"Version '$versionLiteral' does not match version pattern, e.g. 1.0.0-QUALIFIER"
-			}
-			return match.groupValues[1]
-		}
-		manifest {
-			attributes(
-				"Created-By" to "${System.getProperty("java.version")} (${System.getProperty("java.vendor")} ${System.getProperty("java.vm.version")})",
-				"Built-By" to builtByValue,
-				"Build-Date" to buildDate,
-				"Build-Time" to buildTime,
-				"Build-Revision" to versioning.info.commit,
-				"Specification-Title" to project.name,
-				"Specification-Version" to normalizeVersion(project.version.toString()),
-				"Specification-Vendor" to "apiguardian.org",
-				"Implementation-Title" to project.name,
-				"Implementation-Version" to project.version,
-				"Implementation-Vendor" to "apiguardian.org",
-				"Bundle-Name" to project.name,
-				"Bundle-Description" to project.description,
-				"Bundle-DocURL" to "https://github.com/apiguardian-team/apiguardian",
-				"Bundle-Vendor" to "apiguardian.org",
-				"-exportcontents" to "org.apiguardian.api",
-				"Bundle-SymbolicName" to moduleName
-			)
-		}
-		from(files(compileModule.map { "${it.destinationDir}/${moduleName}" })) {
-			include("module-info.class")
-		}
-	}
+compileJava {
+	options.compilerArgs = ['--release', '8']
+}
 
-	javadoc {
-		(options as StandardJavadocDocletOptions).apply {
-			memberLevel = JavadocMemberLevel.PROTECTED
-			isAuthor = true
-			header = "@API Guardian"
-			addStringOption("Xdoclint:html,syntax,reference", "-quiet")
-			links("https://docs.oracle.com/en/java/javase/11/docs/api/")
-		}
-	}
-
-	named<Jar>("sourcesJar") {
-		from("${moduleSourceDir}/${moduleName}") {
-			include("module-info.java")
-		}
+task compileModule(type: JavaCompile) {
+	def moduleSrcDir = file('src/module/java')
+	source(moduleSrcDir)
+	destinationDir = file("$buildDir/classes/java/modules")
+	classpath = compileJava.classpath
+	inputs.property("moduleName", moduleName)
+	inputs.property("moduleVersion", project.version)
+	options.compilerArgs = [
+			'--release', '9',
+			'--module-version', project.version as String,
+			'--module-source-path', moduleSrcDir.toString(),
+			'--patch-module', "$moduleName=${sourceSets.main.allJava.srcDirs.join(':')}",
+			'--module', moduleName
+	]
+}
+
+def normalizeVersion = { versionLiteral ->
+	try {
+		(versionLiteral =~ /(\d+)\.(\d+)\.(\d+).*/)[0][1..3].join('.')
+	} catch (e) {
+		throw new GradleException("Version '$versionLiteral' does not match version pattern, e.g. 1.0.0-QUALIFIER", e)
 	}
+}
 
-	named<Jar>("javadocJar") {
-		from(javadoc.map { File(it.destinationDir, "element-list") }) {
-			// For compatibility with older tools, e.g. NetBeans 11
-			rename { "package-list" }
-		}
+jar {
+	manifest {
+		attributes(
+			'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
+			'Built-By': builtByValue,
+			'Build-Date': buildDate,
+			'Build-Time': buildTime,
+			'Specification-Title': project.name,
+			'Specification-Version': normalizeVersion(project.version),
+			'Specification-Vendor': 'apiguardian.org',
+			'Implementation-Title': project.name,
+			'Implementation-Version': project.version,
+			'Implementation-Vendor': 'apiguardian.org',
+			'Bundle-Name': project.name,
+			'Bundle-Description': project.description,
+			'Bundle-DocURL': 'https://github.com/apiguardian-team/apiguardian',
+			'Bundle-Vendor': 'apiguardian.org',
+			'-exportcontents': 'org.apiguardian.api',
+			'Bundle-SymbolicName': moduleName
+		)
 	}
-
-	withType<Jar>().configureEach {
-		from(rootDir) {
-			include("LICENSE")
-			into("META-INF")
-		}
+	from(files("${compileModule.destinationDir}/$moduleName").builtBy(compileModule)) {
+		include('module-info.class')
 	}
+}
 
-	val prepareDocsForUploadToGhPages by registering(Copy::class) {
-		dependsOn(javadoc)
-		outputs.dir(docsDir)
-
-		from("$buildDir/docs") {
-			include("javadoc/**")
-		}
-		from("$buildDir/docs/javadoc") {
-			// For compatibility with pre JDK 10 versions of the Javadoc tool
-			include("element-list")
-			rename { "api/package-list" }
-		}
-		into("${docsDir}/${docsVersion}")
-		filesMatching("javadoc/**") {
-			path = path.replace("javadoc/", "api/")
-		}
-		includeEmptyDirs = false
-	}
+javadoc {
+	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
+	options.author = true
+	options.header = '@API Guardian'
+	options.addStringOption('Xdoclint:html,syntax,reference', '-quiet')
+	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
+}
 
-	val createCurrentDocsFolder by registering(Copy::class) {
-		dependsOn(prepareDocsForUploadToGhPages)
-		enabled = replaceCurrentDocs
-		outputs.dir("${docsDir}/current")
+task sourcesJar(type: Jar, dependsOn: classes) {
+	classifier = 'sources'
+	from sourceSets.main.allSource
+}
 
-		from("${docsDir}/${docsVersion}")
-		into("${docsDir}/current")
-	}
+task javadocJar(type: Jar) {
+	classifier = 'javadoc'
+	from javadoc
+}
 
-	gitPublishCommit {
-		dependsOn(prepareDocsForUploadToGhPages, createCurrentDocsFolder)
-	}
+artifacts {
+	archives sourcesJar
+	archives javadocJar
 }
 
-if (!isSnapshot) {
+def signArtifacts = !project.version.contains('SNAPSHOT')
+
+if (signArtifacts) {
 	signing {
-		sign(publishing.publications)
+		sign configurations.archives
 	}
 }
 
-nexusPublishing {
-	packageGroup.set(group.toString())
+uploadArchives {
+
+	dependsOn check
+
 	repositories {
-		sonatype()
-	}
-}
+		mavenDeployer {
+
+			if (signArtifacts) {
+				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+			}
+
+			def ossrhUsername = rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : ''
+			def ossrhPassword = rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : ''
+
+			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
+				authentication(userName: ossrhUsername, password: ossrhPassword)
+			}
+
+			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
+				authentication(userName: ossrhUsername, password: ossrhPassword)
+			}
+
+			pom.project {
+				name "${project.group}:${project.name}"
+				packaging 'jar'
+				description "@API Guardian"
+				url 'https://github.com/apiguardian-team/apiguardian'
 
-publishing {
-	publications {
-		create<MavenPublication>("maven") {
-			from(components["java"])
-			pom {
-				name.set("${project.group}:${project.name}")
-				description.set("@API Guardian")
-				url.set("https://github.com/apiguardian-team/apiguardian")
 				scm {
-					connection.set("scm:git:git://github.com/apiguardian-team/apiguardian.git")
-					developerConnection.set("scm:git:git://github.com/apiguardian-team/apiguardian.git")
-					url.set("https://github.com/apiguardian-team/apiguardian")
+					connection 'scm:git:git://github.com/apiguardian-team/apiguardian.git'
+					developerConnection 'scm:git:git://github.com/apiguardian-team/apiguardian.git'
+					url 'https://github.com/apiguardian-team/apiguardian'
 				}
+
 				licenses {
 					license {
-						name.set("The Apache License, Version 2.0")
-						url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
+						name 'The Apache License, Version 2.0'
+						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
 					}
 				}
+
 				developers {
 					developer {
-						id.set("apiguardian")
-						name.set("@API Guardian Team")
-						email.set("team@apiguardian.org")
+						id 'apiguardian'
+						name '@API Guardian Team'
+						email 'team@apiguardian.org'
 					}
 				}
 			}
+
+			pom.whenConfigured { p ->
+				p.dependencies = p.dependencies.findAll { dep -> dep.scope != 'test' }
+			}
 		}
 	}
 }
 
-gitPublish {
-	repoUri.set("https://github.com/apiguardian-team/apiguardian.git")
-	branch.set("gh-pages")
-
-	contents {
-		from(docsDir)
-		into("docs")
-	}
+def docsVersion = project.version.contains('SNAPSHOT') ? 'snapshot' : project.version
+def docsDir = new File(buildDir, 'ghpages-docs')
 
-	preserve {
-		include("**/*")
-		exclude("docs/$docsVersion/**")
-		if (replaceCurrentDocs) {
-			exclude("docs/current/**")
-		}
+task prepareDocsForUploadToGhPages(dependsOn: [javadoc], type: Copy) {
+	outputs.dir docsDir
+
+	from("$buildDir/docs") {
+		include 'javadoc/**'
 	}
+	into "${docsDir}/${docsVersion}"
+	filesMatching('javadoc/**') { fileCopyDetails ->
+		fileCopyDetails.path = fileCopyDetails.path.replace('javadoc/', 'api/')
+	}
+	includeEmptyDirs = false
 }
+
+task createCurrentDocsFolder(dependsOn: prepareDocsForUploadToGhPages, type: Copy) {
+	outputs.dir "${docsDir}/current"
+
+	from "${docsDir}/${docsVersion}"
+	into "${docsDir}/current"
+}
+
+createCurrentDocsFolder.onlyIf { project.hasProperty('replaceCurrentDocs') }
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -1,5 +1,6 @@
 rootProject.name = "apiguardian-api"
 
-require(JavaVersion.current().isJava11) {
-    "The @API Guardian build requires Java 11. Currently executing with Java ${JavaVersion.current()}."
+if (!JavaVersion.current().isJava11Compatible()) {
+     throw new GradleException('The @API Guardian build requires Java 11. ' +
+             "Currently executing with Java ${JavaVersion.current()}.")
 }
